#include &lt;windows.h&gt;
#include&lt;string.h&gt;
#include&lt;stdarg.h&gt;
#include&lt;stdio.h&gt;
#include &lt;glut.h&gt;
static double x=0.0,x1=0.0,y1=0.1,z1=0.0,a1=0,y2=0,z2=0;
static double move=-60;
static bool seperate=false;
void
stroke_output(GLfloat x, GLfloat y, char *format,...)
{
va_list args;
char buffer[200], *p;
va_start(args, format);
vsprintf(buffer, format, args);
va_end(args);
glPushMatrix();
glTranslatef(-2.5, y, 0);
glScaled(0.003, 0.005, 0.005);
for (p = buffer; *p; p++)
glutStrokeCharacter(GLUT_STROKE_ROMAN, *p);
glPopMatrix();
}

void satellite(){

glPushMatrix();
//Core

glPushMatrix();
glColor3f(1,1,0);
glTranslatef(0,2,0);
glScaled(0.3,1,0.3);
glRotatef(90,1,0,0);
if(x&lt;=6)
glutSolidTorus(0.5,1,30,30);
else
glutSolidCube(1);
glPopMatrix();

// Solar Panel

glPushMatrix();
glColor3f(0.2,0.2,0.2);
glTranslatef(1,2,0);

if(x&gt;=6){
glScaled(4,1.5,0.1);
}
else
glScaled(0,0,0);

glRotatef(-20,1,0,0);
glutSolidCube(0.5);
glPopMatrix();

glPushMatrix();
glColor3f(0.2,0.2,0.2);
glTranslatef(-1,2,0);
if(x&gt;=6){
glScaled(4,1.5,0.1);
}
else
glScaled(0,0,0);
glRotatef(-20,1,0,0);
glutSolidCube(0.5);
glPopMatrix();

glPopMatrix();
}
else
glScaled(0,0,0);

glRotatef(-20,1,0,0);
glutSolidCube(0.5);
glPopMatrix();

glPushMatrix();
glColor3f(0.2,0.2,0.2);
glTranslatef(-1,2,0);
if(x&gt;=6){
glScaled(4,1.5,0.1);
}
else
glScaled(0,0,0);
glRotatef(-20,1,0,0);
glutSolidCube(0.5);
glPopMatrix();

glPopMatrix();
}
// Satelitte container
glPushMatrix();
if(x&gt;=6.8){

glTranslatef(2,0,0);
glRotatef(x*40,0,1,0);

}
satellite();
glPopMatrix();
glPushMatrix();
if(x&gt;=5){
glTranslatef(0,y2,y2);
glRotatef(a1,0,1,1);

}

glPushMatrix();
glColor3f(1,1,1);
glTranslatef(0,0.0,0);
glScaled(0.3,4.3,0.3);
glRotatef(90,1,0,0);
glutSolidTorus(0.5,1,30,30);
// Satelitte container
glPushMatrix();
if(x&gt;=6.8){

glTranslatef(2,0,0);
glRotatef(x*40,0,1,0);

}
satellite();
glPopMatrix();
glPushMatrix();
if(x&gt;=5){
glTranslatef(0,y2,y2);
glRotatef(a1,0,1,1);

}

glPushMatrix();
glColor3f(1,1,1);
glTranslatef(0,0.0,0);
glScaled(0.3,4.3,0.3);
glRotatef(90,1,0,0);
glutSolidTorus(0.5,1,30,30);
// Satelitte container
glPushMatrix();
if(x&gt;=6.8){

glTranslatef(2,0,0);
glRotatef(x*40,0,1,0);

}
satellite();
glPopMatrix();
glPushMatrix();
if(x&gt;=5){
glTranslatef(0,y2,y2);
glRotatef(a1,0,1,1);

}

glPushMatrix();
glColor3f(1,1,1);
glTranslatef(0,0.0,0);
glScaled(0.3,4.3,0.3);
glRotatef(90,1,0,0);
glutSolidTorus(0.5,1,30,30);
// Satelitte container
glPushMatrix();
if(x&gt;=6.8){

glTranslatef(2,0,0);
glRotatef(x*40,0,1,0);

}
satellite();
glPopMatrix();
glPushMatrix();
if(x&gt;=5){
glTranslatef(0,y2,y2);
glRotatef(a1,0,1,1);

}

glPushMatrix();
glColor3f(1,1,1);
glTranslatef(0,0.0,0);
glScaled(0.3,4.3,0.3);
glRotatef(90,1,0,0);
glutSolidTorus(0.5,1,30,30);
glutSolidTorus(0.2,1,30,30);
glPopMatrix();

glPushMatrix();
glTranslatef(-0.7,-2.0,0);
glColor3f(0,0,1);
glScaled(1.5,1,1.5);
glRotatef(270,1,0,0);
glutSolidCone(0.2,1,30,30);
glPopMatrix();

//booster
/*
glPushMatrix();
glTranslatef(2,0,0);
glColor3f(1,1,0);
glBegin(GL_POLYGON);

glVertex3f(0,0,0);
glVertex3f(1,0,0);
glVertex3f(0.8,-1,0);
glutSolidTorus(0.2,1,30,30);
glPopMatrix();

glPushMatrix();
glTranslatef(-0.7,-2.0,0);
glColor3f(0,0,1);
glScaled(1.5,1,1.5);
glRotatef(270,1,0,0);
glutSolidCone(0.2,1,30,30);
glPopMatrix();

//booster
/*
glPushMatrix();
glTranslatef(2,0,0);
glColor3f(1,1,0);
glBegin(GL_POLYGON);

glVertex3f(0,0,0);
glVertex3f(1,0,0);
glVertex3f(0.8,-1,0);
glutSolidTorus(0.2,1,30,30);
glPopMatrix();

glPushMatrix();
glTranslatef(-0.7,-2.0,0);
glColor3f(0,0,1);
glScaled(1.5,1,1.5);
glRotatef(270,1,0,0);
glutSolidCone(0.2,1,30,30);
glPopMatrix();

//booster
/*
glPushMatrix();
glTranslatef(2,0,0);
glColor3f(1,1,0);
glBegin(GL_POLYGON);

glVertex3f(0,0,0);
glVertex3f(1,0,0);
glVertex3f(0.8,-1,0);
glutSolidTorus(0.2,1,30,30);
glPopMatrix();

glPushMatrix();
glTranslatef(-0.7,-2.0,0);
glColor3f(0,0,1);
glScaled(1.5,1,1.5);
glRotatef(270,1,0,0);
glutSolidCone(0.2,1,30,30);
glPopMatrix();

//booster
/*
glPushMatrix();
glTranslatef(2,0,0);
glColor3f(1,1,0);
glBegin(GL_POLYGON);

glVertex3f(0,0,0);
glVertex3f(1,0,0);
glVertex3f(0.8,-1,0);
glTranslatef(0,-2+ang,0);
}
else{
glRotatef(60,1,0,0);
glTranslatef(0,0,0);
}
glScaled(0.5,0.5,0.5);
rocket();
glPopMatrix();

//Earth

glPushMatrix();
glColor3f(0,0,1);
if(x&gt;=6.5){
glTranslatef(0,-18,-95);
glRotatef(10*x,0,1,0);

}else{
glTranslatef(0,-10-x,-10-15*x);
}
glutSolidSphere(10,100,100);
glPopMatrix();

// Create Stars
glPushMatrix();
glColor3f(1,1,1);
glTranslatef(0,-ang,0);
stars();
glPopMatrix();

glFlush();
glutSwapBuffers();
}

void p()
{
glutSolidSphere(10,100,100);
glPopMatrix();

// Create Stars
glPushMatrix();
glColor3f(1,1,1);
glTranslatef(0,-ang,0);
stars();
glPopMatrix();

glFlush();
glutSwapBuffers();
}

void p()
{
void doInit()
{

/* Background and foreground color */
glClearColor(0.0,0.0,0.0,0);
glViewport(0,0,640,480);

/* Select the projection matrix and reset it then
setup our view perspective */

glMatrixMode(GL_PROJECTION);
glLoadIdentity();
gluPerspective(30.0f,(GLfloat)640/(GLfloat)480,0.1f,200.0f);

/* Select the modelview matrix, which we alter with rotatef() */
glMatrixMode(GL_MODELVIEW);
glLoadIdentity();
glClearDepth(2.0f);
glEnable(GL_DEPTH_TEST);
glDepthFunc(GL_LEQUAL);
}
void doInit()
{

/* Background and foreground color */
glClearColor(0.0,0.0,0.0,0);
glViewport(0,0,640,480);

/* Select the projection matrix and reset it then
setup our view perspective */

glMatrixMode(GL_PROJECTION);
glLoadIdentity();
gluPerspective(30.0f,(GLfloat)640/(GLfloat)480,0.1f,200.0f);

/* Select the modelview matrix, which we alter with rotatef() */
glMatrixMode(GL_MODELVIEW);
glLoadIdentity();
glClearDepth(2.0f);
glEnable(GL_DEPTH_TEST);
glDepthFunc(GL_LEQUAL);
}
glLightfv(GL_LIGHT0,GL_POSITION,light_position3);
glLightfv(GL_LIGHT0,GL_DIFFUSE,lightIntensity);

glEnable(GL_COLOR_MATERIAL);

glFlush();
glutSwapBuffers();

}

void menu(int id)
{
switch(id)
{

case 2:glutIdleFunc(p);
break;

case 5:exit(0);
break;

}
glLightfv(GL_LIGHT0,GL_POSITION,light_position3);
glLightfv(GL_LIGHT0,GL_DIFFUSE,lightIntensity);

glEnable(GL_COLOR_MATERIAL);

glFlush();
glutSwapBuffers();

}

void menu(int id)
{
switch(id)
{

case 2:glutIdleFunc(p);
break;

case 5:exit(0);
break;

}
glLightfv(GL_LIGHT0,GL_POSITION,light_position3);
glLightfv(GL_LIGHT0,GL_DIFFUSE,lightIntensity);

glEnable(GL_COLOR_MATERIAL);

glFlush();
glutSwapBuffers();

}

void menu(int id)
{
switch(id)
{

case 2:glutIdleFunc(p);
break;

case 5:exit(0);
break;

}
